Lesson overview
This section contains a general overview of topics that you will learn in this lesson.

Explain what form validations are.
Know how to use a few of the basic built-in HTML validations.
Know how to build custom validations.

Required validation
We will often want to ensure specific fields have been filled in before submitting the form, for example, the email and password in a login form.

To make a field required, we add the required attribute to it:

Minimum length validation
To add the minimum length validation, we give the form control a minlength attribute with an integer value that represents the minimum number of characters we want to allow in the form control:

Maximum length validation
To add a maximum length validation, we give the form control a maxlength attribute with an integer value which represents the maximum number of characters we want to allow in the form control:

Combining validations
HTML allows us to apply as many validations as we wish to a form control. For example, we can give our post <textarea> both minlength and maxlength validations:

Min validation
To add a minimum value validation, we give the form control a min attribute with an integer value which represents the minimum number we want the form control to accept:

Max validation
To add a maximum value validation, we give the form control a max attribute with an integer value which represents the maximum number we want the form control to accept:

Pattern validations
To ensure we get the correct information from users, we will often want to ensure data matches a particular pattern. Real-world applications would be checking if a credit card number or a zipcode is in the correct format.

To add a pattern validation, we give the form control a pattern attribute with a regular expression as the value. In our example we are using the pattern validation to ensure a US zip code is in the correct format (5 numbers followed by an optional dash and 4 more numbers):

It is good practice to use a placeholder attribute to show users an example of the expected pattern they need to enter:

The pattern attribute can only be used on <input> elements. Some input elements already validate data that matches a certain pattern. For example, the email input field will make sure a valid email is entered and the url input element will check to ensure the URL starts with http or https:

Styling validations
We can target form controls that have passed or failed validations using the :valid and :invalid pseudo-classes.

To see this in action, we will be using our email and website example that we looked at previously:

Conclusion
The built-in validations will take you far with ensuring your users enter the correct data. They are quick and easy to add. However, they have their limitations.

Sometimes you will need to include validations that the built-in validations won’t be able to do. For example, validating that a password input and password confirmation input have the same value or validating that a username has not already been taken. We are also limited with what we can do with styling the validation messages and the content within them.

In this case, we will need to get creative and make custom validations using JavaScript and CSS. We’ll dive into how to achieve validation via JavaScript in a future lesson.

It’s also worth noting client-side validations are not a silver bullet for ensuring users enter the correct data. To ensure the integrity of any user data coming into our systems, we should also have server-side validations in place. We will cover this side of validations later in the curriculum.