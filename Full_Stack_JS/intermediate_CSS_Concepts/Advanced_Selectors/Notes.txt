Lesson overview
This section contains a general overview of topics that you will learn in this lesson.

Understand how to use parent and sibling selectors.
Recognize the difference between pseudo classes and pseudo elements.
Learn about some of the most useful and common pseudo elements and pseudo classes.
Learn about the different ways to select an attribute or its parts.

Child and sibling combinators
Letâ€™s have a look at some more ways we can access different elements without referring to their classes. Here are three new selectors to do just that.

> - the child combinator
+ - the adjacent sibling combinator
~ - the general sibling combinator

<main class="parent">
  <div class="child group1">
    <div class="grand-child group1"></div>
  </div>
  <div class="child group2">
    <div class="grand-child group2"></div>
  </div>
  <div class="child group3">
    <div class="grand-child group3"></div>
  </div>
</main>

But what if we wanted to be more specific and select only the child or grand-child divs? Thatâ€™s where the child combinator > comes in handy. Unlike the descendant combinator, it will only select direct children.

/* The divs with the class "child" will get selected by this */
main > div {
  /* Our cool CSS */
}

/* The divs with the class "grand-child" will get selected by this */
main > div > div {
  /* More cool CSS */
}

Phrased another way, the child selector will select an element that is one level of indentation down. In order to select an element that is adjacent (immediately following) to our target, or on the same level of indentation, we can use the adjacent sibling combinator +.

/* Only the div with the classes "child group2" will get selected by this */
.group1 + div {
  /* Our cool CSS */
}

/* Only the div with the classes "child group3" will get selected by this */
.group1 + div + div {
  /* More cool CSS */
}

/* All of .group1's div siblings - in this case the 2nd and 3rd .child divs, will get selected by this */
.group1 ~ div {
  /* Our cool CSS */
}

Dynamic and user action pseudo-classes
These types of useful pseudo-classes can make your page feel much more dynamic and interactive.

:focus applies to an element that is currently selected by the user either through selecting it with their cursor or using their keyboard.

:hover will affect anything under the userâ€™s mouse pointer. It can be used to give extra oomph to buttons and links to highlight that theyâ€™re interactable, or to trigger a drop-down menu.

:active applies to elements that are currently being clicked, and is especially useful for giving your user feedback that their action had an effect. This is a great one to give your buttons and other interactive elements more â€˜tactileâ€™ feedback.

  /* This rule will apply to all links */
  a {
    text-decoration: underline;
  }

  /* This will apply to unvisited links */
  a:link {
    color: blue;
  }

  /* And you guessed it, this applies to all links the user has clicked on */
  a:visited {
    color: purple;
  }

Structural pseudo-classes

:root is a special class that represents the very top level of your document - the one element that has no parents. Generally when working with the web, this is equivalent to the html element, but there are a few subtle differences between :root and html.

:root is generally the place where you will place your â€˜globalâ€™ CSS rules that you want available everywhere - such as your custom properties and CSS variables, or rules such as box-sizing: border-box;.

:first-child and :last-child will match elements that are the first or last sibling.

Similarly, :empty will match elements that have no children at all, and :only-child will match elements that donâ€™t have any siblings.

For a more dynamic approach we can use :nth-child. This is a flexible pseudo-class with a few different uses

  .myList:nth-child(5) {/* Selects the 5th element with class myList */}

  .myList:nth-child(3n) { /* Selects every 3rd element with class myList */}

  .myList:nth-child(3n + 3) { /* Selects every 3rd element with class myList, beginning with the 3rd */}

  .myList:nth-child(even) {/* Selects every even element with class myList */}

Pseudo-elements
While pseudo-classes give us an alternative way to interact with our HTML elements based on their state or structure, pseudo-elements are more abstract. They allow us to affect parts of our HTML that arenâ€™t elements at all. These special elements share the same specificity as regular elements (0, 0, 0, 1). There are a number of useful pseudo-elements that can be utilized in any number of creative ways.

::marker allows you to customize the styling of your <li> elementsâ€™ bullets or numbers.

::first-letter and ::first-line allow you to (you guessed it!) give special styling to the first letter or line of some text.

::selection allows you to change the highlighting when a user selects text on the page.

::before and ::after allow us to add extra elements onto the page with CSS, instead of HTML. Using it to decorate text in various ways is one common use case.

<style>
  .emojify::before {
    content: 'ðŸ˜Ž ðŸ˜„ ðŸ¤“';
}

  .emojify::after {
    content: 'ðŸ¤“ ðŸ˜„ ðŸ˜Ž';
}
</style>

<body>
  <div> Let's <span class="emojify">emojify</span>this span!</div>
</body>

Attribute selectors
The last tool weâ€™re going to add to the box is attribute selectors. Recall that an attribute is anything in the opening tag of an HTML element - such as src='picture.jpg' or href="www.theodinproject.com".

Since we write our own values for attributes, we need a slightly more flexible system to be able to target specific values.

Attribute selectors have the same specificity as classes and pseudo-classes (0, 0, 1, 0).

Letâ€™s look at some examples for basic usage.

[attribute] - This general selector will select anything where the given attribute exists. Its value doesnâ€™t matter.
selector[attribute] - Optionally we can combine our attribute selectors with other types of selectors, such as class or element selectors.
[attribute="value"] - To get really specific, we can use = to match a specific attribute with a specific value.

  [src] {
    /* This will target any element that has a src attribute. */
  }

  img[src] {
    /* This will only target img elements that have a src attribute. */
  }

  img[src="puppy.jpg"] {
    /* This will target img elements with a src attribute that is exactly "puppy.jpg" */
  }

  Sometimes we need to be more general in how we access these attributes. For example, perhaps weâ€™re only interested in img elements where the src attributeâ€™s value ends in .jpg. For cases like this we have some attribute selectors that allow us to match a part of the attributeâ€™s value. If youâ€™ve ever come across regular expressions before, these attributes use a similar syntax.

[attribute^="value"] - ^= Will match strings from the start.
[attribute$="value"] - $= Will match strings from the end.
[attribute*="value"] - *= The wildcard selector will match anywhere inside the string.

[class^='aus'] {
  /* Classes are attributes too!
    This will target any class that begins with 'aus':
    class='austria'
    class='australia'
  */
}

[src$='.jpg'] {
  /* This will target any src attribute that ends in '.jpg':
  src='puppy.jpg'
  src='kitten.jpg'
  */
}

[for*='ill'] {
  /* This will target any for attribute that has 'ill' anywhere inside it:
  for="bill"
  for="jill"
  for="silly"
  for="ill"
  */
}


